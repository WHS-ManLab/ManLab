#pragma once
#include <string>
#include <vector>
#include "DBManager.h" 

struct YR_RULES;

// 내부 탐지 결과 구조체(scan, yara검사 후 리턴값)
struct DetectResult {
    bool detected;
    std::string cause;
    std::string malwareName;
};

// 검사결과 관련 구조체
struct ScanInfo {
    std::string path;   // 원본 파일 경로
    std::string cause;  // 격리 원인(hash or yara)
    std::string name;   // 악성코드 이름
    long long size;     // 원본 파일 사이즈
};

class MalwareScan
{
public:
    MalwareScan();                   
    ~MalwareScan();           

    // 검사 실행
    void run();

    // 리포트 인터페이스
    int getTotalScannedFiles() const;
    int getDetectedFiles() const;
    int getQuarantinedFiles() const;
    const std::vector<ScanInfo>& getDetectionResults() const;

private:
    std::string mDir;                          // 검사 루트 디렉토리
    std::vector<std::string> mExceptionDir;    // 예외 디렉토리 목록
    long long mMaxSize;                        // 최대 검사 파일 크기 (bytes)
    bool mShouldQuarantine = false;            // 격리 여부

    std::vector<ScanInfo> mScanInfo;
    int mTotalScannedFiles = 0;
    std::vector<bool> mQuarantineResults;

    // DB 및 YARA 룰 포인터
    StorageHash* mHashStorage = nullptr;
    YR_RULES* mYaraRules = nullptr;

    // 유틸 함수
    DetectResult detectByHash(const std::string& filePath);
    std::string computeHash(const std::string& filePath, const std::string& algo);
    DetectResult matchYaraRules(const std::string& filePath);
};