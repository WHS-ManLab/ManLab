#pragma once

#include <string>
#include <vector>
#include <chrono>
#include <ostream>
#include <filesystem>
#include "DBManager.h"
#include "QuarantineManager.h"
extern "C" {
    #include <yara.h>
}

namespace fs = std::filesystem;


// 내부 탐지·스캔 결과 구조체
struct DetectResult 
{
    bool        detected;
    std::string cause;        // "hash" | "yara"
    std::string malwareName;  // 탐지된 악성코드 이름 또는 해시
};

// MalwareScan – 수동·예약·실시간 통합 스캐너
class MalwareScan {
public:
    enum class Mode { Manual, Scheduled, Realtime };

    MalwareScan();
    ~MalwareScan();

    // -------- 초기화 / 재설정 --------
    void Init();                        // ini 파싱, 예외 디렉터리 세팅, yara 컴파일
    void SetMode(Mode mode);            // 검사 모드 변경 (재사용 대비)
    void Reset();                       // 이전 검사 결과 초기화

    // -------- 실행 --------
    void Run(std::ostream* pOut = nullptr);            // 스캔 실행
    void PrintReport(std::ostream& out) const;         // 콘솔/IP 스트림 출력
    void SendNotification() const;                     // GUI 알림 전송
    void SaveReportToDB();                             // 결과 DB 저장

private:
    // -------- 설정값 --------
    Mode                        mMode;   
    std::string                 mDir;                 // 검사 루트 디렉터리
    std::vector<std::string>    mExceptionDir;        // 제외 디렉터리
    long long                   mMaxSize;             // 검사 최대 파일 크기
    bool                        mbShouldQuarantine;   // 격리 여부

    // -------- 실행 중 상태 --------
    std::chrono::system_clock::time_point mStartTime;
    std::chrono::system_clock::time_point mEndTime;
    std::vector<ScanInfo>     mDetected;              // 탐지 목록
    int                       mTotalScannedFiles;     // 전체 스캔 수
    std::vector<bool>         mQuarantineResults;     // 파일별 격리 성공 여부
    std::string               mReport;                // 리포트 문자열

    // -------- 의존 컴포넌트 --------
    StorageHash*              mHashStorage;          // DBManager 내부 storage
    YR_RULES*                 mYaraRules;            // 미리 컴파일된 룰 핸들

    // -------- 내부 헬퍼 --------
    void collectTargetFiles(std::vector<fs::directory_entry>& entries);
    DetectResult analyzeFile(const fs::path& path);        // 해시+YARA
    bool tryQuarantine(const fs::path& path, const DetectResult& dr);
    bool isELF(const fs::path& path);
    DetectResult detectByHash(const std::string& filePath);
    std::string computeHash(const std::string& filePath, const std::string& algo);
    DetectResult matchYaraRules(const std::string& filePath);
    bool isELF(const std::string& path);
    std::string GenerateReportString();
};